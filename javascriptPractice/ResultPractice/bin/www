#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('resultpractice:server');
var http = require('http');
const io = require("socket.io")(http);//匯入socket.io


/**
 * Save information from Client side.
 */

class saveClient {}//www端接收模板

class saveServer{//www端儲存庫模板
  constructor() {
    this.IP = [];//IP庫,不可覆寫
    this.Join = 0;//體驗者人數
    this.Sup = 0;//協助者人數
    this.rolelocks = [];//角色庫，不可覆寫
    this.users =[];//角色名稱庫
    this.JoinUserBirth = 0;//生日
    this.GameLock = false;
    // this.joinlock = [];//鎖頭庫,不可覆寫
  }
}
let serverClient = new saveClient();//建立www端物件來儲存接收資訊，可覆寫
let RestartBase = new saveClient();//初始化www端資料庫
let saveBase= new saveServer();//www端儲存最新版
let IPIndex = 0;
let catchIndex = 0;
////////////////////////////////////////////////確認連線、IP獲取/////////////////////////////////
/**
 * socket.io Listen 
 */
io.on("connection",function (socket) {
  ////////////////抓本機虛擬IP///////////////////////////////////
////////////失敗/////////////////////////
  //建立client端監測接收端，如監測到connection類型被client端丟出，則印出丟出的client IP
  /////////////////////////////////////////////初始化///////////////////////////////////////////
  let ClientIP = socket.handshake.address;//取得要求連線之IP位置

  if(saveBase.IP.find(checkIP)===undefined)//如果IP庫不存在此IP，則存入IP庫
  {
    saveBase.IP[IPIndex] = ClientIP;
    catchIndex = IPIndex;//此Client端的IP位置視為存取位置
    // saveBase.rolelocks[catchIndex] = undefined;
    IPIndex+=1;
    console.log("New Connect Success! New ClientIP: "+ClientIP);
  }
  else//如果IP存在則視為此Client端為重新連線
  {
    catchIndex = saveBase.IP.indexOf(ClientIP);//此Client端的取物索引
  }
  socket.emit("Set",ClientIP,saveBase,catchIndex);//將IP、www端資料傳給Client端
  // console.log("set: "+catchIndex)

  function checkIP(element)
  {
    return  element === ClientIP;
  }

  /////////////////////////////////////////Data新增對比更新/////////////////////////////////////////
    socket.on("ClientUpData",function (ClientUpData) {//接收Client端Data更新

      serverClient = ClientUpData;//將接收的物件用www端物件存取

  ///////////////////////////////////////////更新www端更新///////////////////////////////////
      saveBase.Join = serverClient.Join;//更新www端Join值
      saveBase.Sup = serverClient.Sup;//更新www端Sup值
      
      catchIndex = saveBase.IP.indexOf(ClientIP);//取的此Client IP位於伺服端的儲存索引
      saveBase.rolelocks[catchIndex] = serverClient.rolelock;//更新角色種類
      saveBase.users[catchIndex] = serverClient.user;//更新角色名稱
      saveBase.GameLock = serverClient.GameLock;

      if(serverClient.rolelock ===1)
      {
        saveBase.JoinUserBirth = serverClient.JoinBirth;//更新體驗者生日
      }
      socket.broadcast.emit("UpData", serverClient);
      console.log("www Database SaveBase: "+" catchIndex:"+catchIndex);
      console.log(saveBase);
      console.log("www Database emit server: "+" catchIndex:"+catchIndex);
      console.log(serverClient);
    });
  
    socket.on("Restart",function (Restart) {
      socket.broadcast.emit("RestartClient",Restart);
      saveBase = RestartBase;
      console.log("www Database RestartBase: ");
      console.log(saveBase);
    })
  });





/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.listen(server);// 開啟 Socket.IO 的 listener

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
